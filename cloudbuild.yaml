# cloudbuild.yaml\n#\n# Cloud Build configuration for BigQuery Telegram Bot\n# This pipeline ensures safe deployments and protects against quota waste\n\nsteps:\n# Step 1: Install dependencies\n- name: 'node:18'\n  id: 'npm-install'\n  entrypoint: 'npm'\n  args: ['ci']\n  env:\n    - 'NODE_ENV=development'\n\n# Step 2: Run unit tests\n- name: 'node:18'\n  id: 'unit-tests'\n  entrypoint: 'npm'\n  args: ['run', 'test:unit']\n  env:\n    - 'NODE_ENV=test'\n    - 'GOOGLE_CLOUD_PROJECT=${_TEST_PROJECT_ID}'\n\n# Step 3: Run integration tests\n- name: 'node:18'\n  id: 'integration-tests'\n  entrypoint: 'npm'\n  args: ['run', 'test:integration']\n  env:\n    - 'NODE_ENV=test'\n    - 'GOOGLE_CLOUD_PROJECT=${_TEST_PROJECT_ID}'\n\n# Step 4: Deploy to staging (only for dev branch)\n- name: 'gcr.io/cloud-builders/gcloud'\n  id: 'deploy-staging'\n  entrypoint: 'bash'\n  args:\n    - '-c'\n    - |\n      if [[ \"${BRANCH_NAME}\" == \"dev\" ]]; then\n        echo \"Deploying to staging environment...\"\n        # Deploy webhook function\n        gcloud functions deploy telegramWebhook-staging \\\n          --runtime nodejs18 \\\n          --trigger-http \\\n          --allow-unauthenticated \\\n          --entry-point telegramWebhook \\\n          --source functions/ \\\n          --memory 128MB \\\n          --timeout 540s \\\n          --set-env-vars NODE_ENV=staging,GOOGLE_CLOUD_PROJECT=${_STAGING_PROJECT_ID}\n        \n        # Deploy message processor function\n        gcloud functions deploy processMessage-staging \\\n          --runtime nodejs18 \\\n          --trigger-topic telegram-messages-staging \\\n          --entry-point processMessage \\\n          --source functions/ \\\n          --memory 256MB \\\n          --timeout 540s \\\n          --set-env-vars NODE_ENV=staging,GOOGLE_CLOUD_PROJECT=${_STAGING_PROJECT_ID}\n      else\n        echo \"Not deploying to staging - not on dev branch\"\n      fi\n  waitFor: ['integration-tests']\n\n# Step 5: Deploy to production (only for main branch)\n- name: 'gcr.io/cloud-builders/gcloud'\n  id: 'deploy-production'\n  entrypoint: 'bash'\n  args:\n    - '-c'\n    - |\n      if [[ \"${BRANCH_NAME}\" == \"main\" ]]; then\n        echo \"Deploying to production environment...\"\n        # Deploy webhook function\n        gcloud functions deploy telegramWebhook \\\n          --runtime nodejs18 \\\n          --trigger-http \\\n          --allow-unauthenticated \\\n          --entry-point telegramWebhook \\\n          --source functions/ \\\n          --memory 128MB \\\n          --timeout 540s \\\n          --set-env-vars NODE_ENV=production,GOOGLE_CLOUD_PROJECT=${_PROD_PROJECT_ID}\n        \n        # Deploy message processor function\n        gcloud functions deploy processMessage \\\n          --runtime nodejs18 \\\n          --trigger-topic telegram-messages \\\n          --entry-point processMessage \\\n          --source functions/ \\\n          --memory 256MB \\\n          --timeout 540s \\\n          --set-env-vars NODE_ENV=production,GOOGLE_CLOUD_PROJECT=${_PROD_PROJECT_ID}\n        \n        # Deploy scheduled functions\n        gcloud functions deploy cleanupCache \\\n          --runtime nodejs18 \\\n          --trigger-http \\\n          --allow-unauthenticated \\\n          --entry-point cleanupCache \\\n          --source scheduler/ \\\n          --memory 128MB \\\n          --timeout 540s \\\n          --set-env-vars NODE_ENV=production,GOOGLE_CLOUD_PROJECT=${_PROD_PROJECT_ID}\n        \n        gcloud functions deploy sendDailyReminders \\\n          --runtime nodejs18 \\\n          --trigger-http \\\n          --allow-unauthenticated \\\n          --entry-point sendDailyReminders \\\n          --source workflows/ \\\n          --memory 128MB \\\n          --timeout 540s \\\n          --set-env-vars NODE_ENV=production,GOOGLE_CLOUD_PROJECT=${_PROD_PROJECT_ID}\n      else\n        echo \"Not deploying to production - not on main branch\"\n      fi\n  waitFor: ['unit-tests']\n\n# Step 6: Run post-deployment tests (only for production)\n- name: 'node:18'\n  id: 'post-deployment-tests'\n  entrypoint: 'bash'\n  args:\n    - '-c'\n    - |\n      if [[ \"${BRANCH_NAME}\" == \"main\" ]]; then\n        echo \"Running post-deployment tests...\"\n        npm run test:e2e\n      else\n        echo \"Skipping post-deployment tests - not on main branch\"\n      fi\n  env:\n    - 'NODE_ENV=production'\n    - 'GOOGLE_CLOUD_PROJECT=${_PROD_PROJECT_ID}'\n  waitFor: ['deploy-production']\n\n# Define substitutions\nsubstitutions:\n  _TEST_PROJECT_ID: your-test-project-id\n  _STAGING_PROJECT_ID: your-staging-project-id\n  _PROD_PROJECT_ID: your-production-project-id\n\n# Define tags for easier identification\ntags:\n  - 'telegram-bot'\n  - 'bigquery'\n  - 'ci-cd'\n\n# Define logs bucket\nlogsBucket: 'gs://your-build-logs-bucket'\n\n# Define timeout\ntimeout: 1800s