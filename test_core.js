// Simple test script to verify core functions\nconsole.log('=== Testing Core Functions ===');\n\n// Test 1: Challan validation\nconsole.log('\\n1. Testing Challan Validation...');\ntry {\n  const { validateChallanNumbers } = require('./functions/payment');\n  \n  const testData = [\n    { input: 'CH-2023-1001', expected: true },\n    { input: 'INV-2023-12345', expected: true },\n    { input: 'INVALID', expected: false },\n    { input: '', expected: false }\n  ];\n  \n  testData.forEach((test, index) => {\n    const result = validateChallanNumbers(test.input);\n    const passed = result.valid === test.expected;\n    console.log(`  Test ${index + 1}: ${passed ? 'PASS' : 'FAIL'} - Input: \"${test.input}\"`);\n  });\n} catch (error) {\n  console.log('  Error:', error.message);\n}\n\n// Test 2: Cache key generation\nconsole.log('\\n2. Testing Cache Key Generation...');\ntry {\n  const { generateCacheKey } = require('./bigquery/cache');\n  \n  const result1 = generateCacheKey('department_options', 'user123', 'finance');\n  const expected1 = 'department_options:user123:finance';\n  console.log(`  Test 1: ${result1 === expected1 ? 'PASS' : 'FAIL'} - Got: \"${result1}\"`);\n  \n  const result2 = generateCacheKey('bank_accounts', 'branch456', 'active');\n  const expected2 = 'bank_accounts:branch456:active';\n  console.log(`  Test 2: ${result2 === expected2 ? 'PASS' : 'FAIL'} - Got: \"${result2}\"`);\n} catch (error) {\n  console.log('  Error:', error.message);\n}\n\n// Test 3: Snooze calculations\nconsole.log('\\n3. Testing Snooze Calculations...');\ntry {\n  const { calculateSnoozeUntil } = require('./functions/snooze');\n  \n  // Use a fixed date for consistent testing\n  const testDate = new Date('2023-11-05T10:00:00Z');\n  \n  // Mock Date for consistent results\n  const OriginalDate = global.Date;\n  global.Date = class extends OriginalDate {\n    constructor(...args) {\n      if (args.length === 0) {\n        return testDate;\n      }\n      return new OriginalDate(...args);\n    }\n  };\n  \n  const result1 = calculateSnoozeUntil('30m');\n  const expected1 = new Date('2023-11-05T10:30:00Z');\n  console.log(`  Test 1 (30m): ${result1.getTime() === expected1.getTime() ? 'PASS' : 'FAIL'}`);\n  \n  const result2 = calculateSnoozeUntil('1h');\n  const expected2 = new Date('2023-11-05T11:00:00Z');\n  console.log(`  Test 2 (1h): ${result2.getTime() === expected2.getTime() ? 'PASS' : 'FAIL'}`);\n  \n  // Restore original Date\n  global.Date = OriginalDate;\n} catch (error) {\n  console.log('  Error:', error.message);\n}\n\nconsole.log('\\n=== Test Complete ===');